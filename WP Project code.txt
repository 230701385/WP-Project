//userModel.js
const mongoose = require('mongoose');

const userSchema  = new mongoose.Schema({
    firstName : {
        type: String,
        required: true,
        trim: true,
    } , 
    lastName : {
        type: String,
        required: true,
        trim: true,
    } , 
    mobileNumber : {
        type: String,
        required: true,
        match: [/^\d{10}$/],
        validate: {
            validator: function(v) {
                return v.length === 10;
            },
            message: props => `${props.value} is not a valid mobile number!`
        }
    },
    email : {
        type: String,
        required: true,
        match : [/^[^\s@]+@[^\s@]+\.[^\s@]+$/],
        validate: {
            validator: function(v) {
                return v.includes('@') && v.includes('.'); 
            },
            message: props => `${props.value} is not a valid email address!`
        }
    }, 
    role : {
        type: String,
        requried: true
    },
    password : {
        type: String,
        required: true,
        minlength: 6,
        maxlength: 255
    }
})

module.exports = mongoose.model("User", userSchema);

//productModel.js
const mongoose = require('mongoose');

const eyewearProductSchema  = new mongoose.Schema({
    name : {
        type: String,
        required: true,
        trim: true,
        maxlength: 100,
    } , 
    description : {
        type: String,
        required: true,
        maxlength: 1000,
    } , 
    category : {
        type: String,
        required: true,
        enum : ['Eyeglasses', 'Sunglasses', 'Contact Lenses', 'Accessories'],
    },
    brand : {
        type: String,
        required: true,
        trim: true,
    }, 
    price : {
        type: Number,
        requried: true,
        min: 0,
    },
    availability : {
        type: Boolean,
        default: true,
    },
    frameType : {
        type: String,
        enum: ['Full-Rim', 'Half-Rim', 'Rimless']
    },
    gender : {
        type: String,
        default: 'Unisex',
        enum : ['Men', 'Women', 'Unisex']
    },
    imageUrl : {
        type: "String"
    },
    userId : {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
    }
})

module.exports = mongoose.model("EyewearProductSchema", eyewearProductSchema);


//userController.js
const User = require('../models/userModel');
const generateToken = require('../authUtils');

const addUser = async (req,res) => {
    try {
        const newUser = await User.create(req.body);
        res.status(201).json({message: "Success"});
    } catch(error) {
        res.status(500).json({message: error.message});
    }
};

const getUserByUsernameAndPassword = async (req,res) => {
    try {
        const {email, password} = req.body;

        const user = await User.findOne({ email, password});
        if(user){
            const token = generateToken(user._id);
            res.status(200).json({user, token});
        } else {
            res.status(200).json({message: 'Invalid Credentials'});
        }
    } catch(error) {
        res.status(500).json({message: error.message});
    }
};

const getAllUsers = async (req,res) => {
    try {
        const users = await User.find();
        res.status(200).json(users);
    } catch(error) {
        res.status(500).json({message: error.message});
    }
};

module.exports = { addUser, getUserByUsernameAndPassword, getAllUsers };


//productController.js
const Product = require('../models/eyewearProduct');
const generateToken = require('../authUtils');

const addProduct = async (req,res) => {
    try {
        const newProduct = await Product.create(req.body);
        res.status(201).json({message: "Product Added Successfully"});
    } catch(error) {
        res.status(500).json({message: error.message});
    }
};

const getProductById = async (req,res) => {
    try {
        const { id } = req.params;

        const product = await Product.findById(id);
        if(product){
            res.status(200).json(product);
        } else {
            res.status(404).json({message: 'Product not found'});
        }
    } catch(error) {
        res.status(500).json({message: error.message});
    }
};

const getAllProdutcs = async (req,res) => {
    try {
        const searchValue = req.query?.searchValue || '';
        const sortValue = parseInt(req.query?.sortValue, 10);

        const searchRegex = new RegExp(searchValue, 'i');

        const filter = {
            $or: [
                { name: searchRegex},
                {description: searchRegex}
            ]
        };

        let sortOrder = 1;
        if(sortValue === -1)
            sortOrder = -1;

        const products = await Product.find(filter).sort({ price: sortOrder});
        res.status(200).json(products);
    } catch(error) {
        res.status(500).json({message: error.message});
    }
};

const getProductsByUserId = async (req,res) => {
    try {
        const userId = req.body?.userId;
        const searchValue = req.query?.searchValue || '';
        const sortValue = parseInt(req.query?.sortValue, 10);

        const searchRegex = new RegExp(searchValue, 'i');

        const filter = {
            userId,
            $or: [
                { name: searchRegex},
                {description: searchRegex}
            ]
        };

        let sortOrder = 1;
        if(sortValue === -1)
            sortOrder = -1;

        const products = await Product.find(filter).sort({ price: sortOrder});
        res.status(200).json(products);
    } catch(error) {
        res.status(500).json({message: error.message});
    }
};

const updateProduct = async (req,res) => {
    try{
        const { id } = req.params;
        const updateData = req.body;

        const updatedProduct = await Product.findByIdAndUpdate(id, updateData, {
            new: true,
            runValidators: true
        });

        if(!updatedProduct){
            res.status(404).json({message: 'Product not found'});
        }
        res.status(200).json({message: 'Product Updated Successfully'});
    } catch(error) {
        res.status(500).json({message: error.message});
    }
}

const deleteProduct = async (req,res) => {
    try {
        const { id } = req.params;

        const deletedProduct = await Product.findByIdAndDelete(id);
        if(!deletedProduct){
            res.status(404).json({message: 'Product not found'});
        }
        res.status(200).json({message: 'Product Deleted Successfully'});
    } catch(error) {
        res.status(500).json({message: error.message});
    }
}

module.exports = { addProduct, getProductById, getAllProdutcs, getProductsByUserId, updateProduct, deleteProduct };


//userRouter.js
const express = require('express');
const router = express.Router();

const userController = require('../controllers/userController');
const { validateToken } = require('../authUtils');

router.use(validateToken);

router.post('/user/signup', userController.addUser);
router.post('/user/login', userController.getUserByUsernameAndPassword);
router.get('/user/getAllUsers', userController.getAllUsers);


module.exports = router;


//productRouter.js

const express = require('express');
const router = express.Router();

const productController = require('../controllers/eyewearProductController');
const { validateToken } = require('../authUtils');

router.use(validateToken);

router.post('/products/addProduct', productController.addProduct);
router.post('/products/getAllProducts', productController.getAllProdutcs);
router.post('/products/getProductsByUserId', productController.getProductsByUserId);
router.get('/products/getProductById/:id', productController.getProductById);
router.put('/products/updateProduct/:id', productController.updateProduct);
router.delete('/products/deleteProduct/:id', productController.deleteProduct);

module.exports = router;


//index.js
const express = require('express');
const mongoose  = require('mongoose');
const cors = require('cors');

const userRoutes = require('./routers/userRouter');
const productRoutes = require('./routers/eyewearProductRouter');

const app = express();
app.use(express.json());

const corsOptions = {
    origin: "*",
    methods : ['GET','POST','PUT','DELETE','OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
};

app.use(cors(corsOptions));

mongoose.connect('mongodb://127.0.0.1:27017/eyeweardb', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(()=> console.log('Mongodb connected successfully'))
.catch(err => console.error('Connecttion error'));

app.use('/', userRoutes);
app.use('/', productRoutes);

app.listen(8080, () =>{
    console.log('Server running on port 8080');    
})


//Login.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './Login.css';

function Login() {
    const navigate = useNavigate();

    const [formData, setFormData] = useState({
        email: '',
        password: ''
    });

    const [formErrors, setFormErrors] = useState({});
    const [loginError, setLoginError] = useState('');

    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value
        });
    };
    
    const validate = () => {
        const errors = {};
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if(!formData.email.trim()) {
            errors.email = 'Email is required';
        } else if(!emailRegex.test(formData.email)) {
            errors.email = 'Invalid email format';
        }

        if(!formData.password.trim()){
            errors.password = 'Password is required';
        } else if(formData.password.length < 6){
            errors.password = 'Password must be at least 6 characters';
        }

        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    }    
    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoginError('');

        if(!validate()) 
            return;

        try {
            const response = await axios.post('http://localhost:8080/user/login', formData);

            if(response.data.message === 'Invalid credentials') {
                setLoginError('Invalid email or password');
                return;
            }

            const { token, user } = response.data;

            localStorage.setItem('token', token);
            localStorage.setItem('userId', user._id);
            localStorage.setItem('userName', user.name);
            localStorage.setItem('role', user.role);

            if(user.role === 'Manager') {
                navigate('/manage-products');
            } else if(user.role === 'Employeee'){
                navigate('/product-catalog');
            } else {
                navigate('/');
            }
        } catch(error) {
            console.error(error);
            navigate('/error');
        }
    };

    return (
        <div className='login-container'>
            <div className='login-form-section'>
                <h2>Login</h2>

                <form onSubmit={handleSubmit} className='login-form'>

                    <div className='form-group'>
                        <label>Email</label>
                        <input
                            type='email'
                            name='email'
                            value={formData.email}
                            onChange={handleChange}
                            placeholder='Enter your email'
                        />
                        {formErrors.email && <p className='error'>{formErrors.email}</p>}
                    </div>

                    <div className='form-group'>
                        <label>Password</label>
                        <input
                            type='password'
                            name='password'
                            value={formData.password}
                            onChange={handleChange}
                            placeholder='Enter your password'
                        />
                        {formErrors.password && <p className='error'>{formErrors.password}</p>}
                    </div>

                    <button type='submit' className='login-button'>Login</button>

                    {loginError && <p className='error'>{loginError}</p>}

                    <p className='signup-link'>Don't have an account? <span onClick={() => navigate('/register')}>Signup</span></p>
                </form>
            </div>

            <div className='login-branding-section'>
                <h3>Welcome back!</h3>
                <p>Access your dashboard and manage your products efficiently.</p>
            </div>
        </div>
    );
}

export default Login;

//Login.css

.login-container {
    display: flex;
    height: 100vh;
    font-family: 'Poppins', sans-serif;
}

.login-form-section, .login-branding-section {
    flex: 1;
    padding: 50px;
}

.login-form-section {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.login-form h2 {
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
}

input {
    width: 100%;
    padding: 10px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.login-button {
    width: 100%;
    padding: 10px;
    margin-top: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;   
}

.login-button:hover {
    background-color: #0056b3;
}

.error {
    color: red;
    font-size: 0.9rem;
    margin-top: 5px;
}

.signup-link span {
    color: #007bff;
    cursor: pointer;
    text-decoration: underline;
}

.login-branding-section {
    background-color: #f0f4ff;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: #333;
}

//Register.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './Register.css'; // optional CSS file

function Register() {
  const navigate = useNavigate();

  // ✅ State management
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    mobileNumber: '',
    email: '',
    role: 'Manager', // default role
    password: '',
    confirmPassword: ''
  });

  const [formErrors, setFormErrors] = useState({});
  const [showSuccessPopup, setShowSuccessPopup] = useState(false);

  // ✅ Handle input changes
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  // ✅ Validation logic
  const validate = () => {
    const errors = {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const mobileRegex = /^\d{10}$/;

    if (!formData.firstName.trim()) errors.firstName = 'First name is required';
    if (!formData.lastName.trim()) errors.lastName = 'Last name is required';
    if (!formData.mobileNumber.trim()) {
      errors.mobileNumber = 'Mobile number is required';
    } else if (!mobileRegex.test(formData.mobileNumber)) {
      errors.mobileNumber = 'Mobile number must be exactly 10 digits';
    }
    if (!formData.email.trim()) {
      errors.email = 'Email is required';
    } else if (!emailRegex.test(formData.email)) {
      errors.email = 'Invalid email format';
    }
    if (!formData.password.trim()) {
      errors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      errors.password = 'Password must be at least 6 characters';
    }
    if (!formData.confirmPassword.trim()) {
      errors.confirmPassword = 'Please confirm your password';
    } else if (formData.password !== formData.confirmPassword) {
      errors.confirmPassword = 'Passwords do not match';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // ✅ Form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) return;

    try {
      const payload = {
        name: `${formData.firstName} ${formData.lastName}`,
        mobileNumber: formData.mobileNumber,
        email: formData.email,
        password: formData.password,
        role: formData.role
      };

      const response = await axios.post('http://localhost:8080/user/signup', payload);

      if (response.status === 200 || response.status === 201) {
        setShowSuccessPopup(true);
      } else {
        navigate('/error');
      }
    } catch (error) {
      console.error('Registration failed:', error);
      navigate('/error');
    }
  };

  // ✅ Handle popup close
  const handlePopupClose = () => {
    setShowSuccessPopup(false);
    navigate('/login');
  };

  return (
    <div className="register-container">
      {/* Left side: form */}
      <div className="register-form-section">
        <h2>Register</h2>

        <form onSubmit={handleSubmit} className="register-form">
          {/* First Name */}
          <div className="form-group">
            <label>First Name</label>
            <input
              type="text"
              name="firstName"
              value={formData.firstName}
              onChange={handleChange}
              placeholder="Enter first name"
            />
            {formErrors.firstName && <p className="error">{formErrors.firstName}</p>}
          </div>

          {/* Last Name */}
          <div className="form-group">
            <label>Last Name</label>
            <input
              type="text"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
              placeholder="Enter last name"
            />
            {formErrors.lastName && <p className="error">{formErrors.lastName}</p>}
          </div>

          {/* Mobile */}
          <div className="form-group">
            <label>Mobile Number</label>
            <input
              type="text"
              name="mobileNumber"
              value={formData.mobileNumber}
              onChange={handleChange}
              placeholder="Enter 10-digit mobile number"
            />
            {formErrors.mobileNumber && <p className="error">{formErrors.mobileNumber}</p>}
          </div>

          {/* Email */}
          <div className="form-group">
            <label>Email</label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="Enter your email"
            />
            {formErrors.email && <p className="error">{formErrors.email}</p>}
          </div>

          {/* Role */}
          <div className="form-group">
            <label>Role</label>
            <select name="role" value={formData.role} onChange={handleChange}>
              <option value="Manager">Manager</option>
              <option value="Employee">Employee</option>
            </select>
          </div>

          {/* Password */}
          <div className="form-group">
            <label>Password</label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              placeholder="Enter password"
            />
            {formErrors.password && <p className="error">{formErrors.password}</p>}
          </div>

          {/* Confirm Password */}
          <div className="form-group">
            <label>Confirm Password</label>
            <input
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              placeholder="Re-enter password"
            />
            {formErrors.confirmPassword && <p className="error">{formErrors.confirmPassword}</p>}
          </div>

          {/* Submit Button */}
          <button type="submit" className="register-button">Register</button>

          {/* Navigation Link */}
          <p className="login-link">
            Already have an account?{' '}
            <span onClick={() => navigate('/login')}>Login</span>
          </p>
        </form>
      </div>

      {/* Right side: branding */}
      <div className="register-branding-section">
        <h3>Eyewear Catalog</h3>
        <p>Discover stylish eyewear and manage your inventory efficiently.</p>
      </div>

      {/* Success Popup Modal */}
      {showSuccessPopup && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h3>Registration Successful</h3>
            <p>You can now login with your credentials.</p>
            <button onClick={handlePopupClose}>Go to Login</button>
          </div>
        </div>
      )}
    </div>
  );
}

export default Register;
.register-container {
  display: flex;
  height: 100vh;
  font-family: 'Poppins', sans-serif;
}

.register-form-section, .register-branding-section {
  flex: 1;
  padding: 50px;
}

.register-form-section {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.register-form h2 {
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

input, select {
  width: 100%;
  padding: 10px;
  margin-top: 5px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.register-button {
  width: 100%;
  padding: 10px;
  margin-top: 15px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.register-button:hover {
  background-color: #0056b3;
}

.error {
  color: red;
  font-size: 0.9rem;
  margin-top: 5px;
}

.login-link span {
  color: #007bff;
  cursor: pointer;
  text-decoration: underline;
}

.register-branding-section {
  background-color: #f0f4ff;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: #333;
}

/* Popup Modal */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.4);
  display: flex;
  justify-content: center;
  align-items: center;
}

.popup-content {
  background: white;
  padding: 30px 40px;
  border-radius: 10px;
  text-align: center;
}

.popup-content h3 {
  margin-bottom: 10px;
}

.popup-content button {
  margin-top: 10px;
  padding: 8px 15px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.popup-content button:hover {
  background-color: #0056b3;
}


//ErrorPage.jsx

import React from 'react';
import './ErrorPage.css'; // optional styling file

function ErrorPage() {
  return (
    <div className="parent">
      <div className="error-container">
        <h1 className="htag">Something Went Wrong</h1>
        <p className="ptag">
          We're sorry, but an error occurred. Please try again later.
        </p>
      </div>
    </div>
  );
}

export default ErrorPage;
.parent {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f9f9fb;
  font-family: 'Poppins', sans-serif;
}

.error-container {
  text-align: center;
  padding: 40px 60px;
  border: 1px solid #ddd;
  border-radius: 10px;
  background: white;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.htag {
  color: #ff3b3b;
  font-size: 2rem;
  margin-bottom: 15px;
}

.ptag {
  color: #555;
  font-size: 1.1rem;
}

//DisplayProduct.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './DisplayProduct.css';

function DisplayProduct() {
  const navigate = useNavigate();

  // ✅ State Management
  const [products, setProducts] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortValue, setSortValue] = useState(1);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showPopup, setShowPopup] = useState(false);

  // ✅ Fetch Data Function
  const fetchData = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        navigate('/login');
        return;
      }

      // 1️⃣ Fetch all users
      const userRes = await axios.get('http://localhost:8080/user/getAllUsers', {
        headers: { Authorization: token }
      });

      // 2️⃣ Fetch all products
      const productRes = await axios.get(
        `http://localhost:8080/product/getAllProducts?searchValue=${searchTerm}&sortValue=${sortValue}`,
        { headers: { Authorization: token } }
      );

      const users = userRes.data;
      const productsData = productRes.data;

      // 3️⃣ Enrich product data with user info
      const enrichedProducts = productsData.map((product) => {
        const user = users.find((u) => u._id === product.userId);
        return {
          ...product,
          userName: user ? user.name : 'Unknown',
          userEmail: user ? user.email : 'N/A',
          userPhone: user ? user.mobileNumber : 'N/A'
        };
      });

      setProducts(enrichedProducts);
    } catch (error) {
      console.error('Error fetching products:', error);
      navigate('/error');
    }
  };

  // ✅ Fetch data on component mount & when search/sort changes
  useEffect(() => {
    fetchData();
    // eslint-disable-next-line
  }, [searchTerm, sortValue]);

  // ✅ Logout handler
  const handleLogout = () => {
    localStorage.clear();
    navigate('/login');
  };

  // ✅ Open popup
  const handleViewInfo = (product) => {
    setSelectedProduct(product);
    setShowPopup(true);
  };

  // ✅ Close popup
  const closePopup = () => {
    setShowPopup(false);
    setSelectedProduct(null);
  };

  return (
    <div className="product-list-container">
      {/* Header */}
      <div className="header-section">
        <h1>Eyewear Catalog</h1>
        <button className="logout-button" onClick={handleLogout}>Logout</button>
      </div>

      {/* Search + Sort Controls */}
      <div className="controls">
        <input
          type="text"
          placeholder="Search products..."
          className="searchBar"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <div className="sort-buttons">
          <button
            onClick={() => setSortValue(1)}
            className={sortValue === 1 ? 'active' : ''}
          >
            Asc
          </button>
          <button
            onClick={() => setSortValue(-1)}
            className={sortValue === -1 ? 'active' : ''}
          >
            Desc
          </button>
        </div>
      </div>

      {/* Product Table */}
      <table className="product-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Brand</th>
            <th>Category</th>
            <th>Price</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {products.length > 0 ? (
            products.map((product) => (
              <tr key={product._id}>
                <td>{product.name}</td>
                <td>{product.brand}</td>
                <td>{product.category}</td>
                <td>₹{product.price}</td>
                <td>
                  <button
                    className="view-btn"
                    onClick={() => handleViewInfo(product)}
                  >
                    View Info
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" className="no-products">
                No products found
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Product Info Popup */}
      {showPopup && selectedProduct && (
        <div className="popup-overlay">
          <div className="popup-content">
            <button className="close-btn" onClick={closePopup}>×</button>
            <h2>{selectedProduct.name}</h2>
            <p><strong>Brand:</strong> {selectedProduct.brand}</p>
            <p><strong>Category:</strong> {selectedProduct.category}</p>
            <p><strong>Price:</strong> ₹{selectedProduct.price}</p>
            <p><strong>Description:</strong> {selectedProduct.description}</p>
            <p><strong>Gender:</strong> {selectedProduct.gender}</p>
            <p><strong>Frame Type:</strong> {selectedProduct.frameType}</p>
            <p><strong>Availability:</strong> {selectedProduct.availability}</p>
            <hr />
            <p><strong>Added By:</strong> {selectedProduct.userName}</p>
            <p><strong>Email:</strong> {selectedProduct.userEmail}</p>
            <p><strong>Phone:</strong> {selectedProduct.userPhone}</p>
          </div>
        </div>
      )}
    </div>
  );
}

export default DisplayProduct;
.product-list-container {
  font-family: 'Poppins', sans-serif;
  padding: 20px 50px;
  background-color: #f9f9fb;
  min-height: 100vh;
}

/* Header */
.header-section {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.logout-button {
  background-color: #e63946;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.logout-button:hover {
  background-color: #b71c1c;
}

/* Controls */
.controls {
  display: flex;
  justify-content: space-between;
  margin: 20px 0;
}

.searchBar {
  width: 60%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.sort-buttons button {
  margin-left: 10px;
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background-color: #007bff;
  color: white;
}

.sort-buttons button.active {
  background-color: #0056b3;
}

/* Table */
.product-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.product-table th,
.product-table td {
  padding: 12px 15px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.product-table th {
  background-color: #007bff;
  color: white;
}

.view-btn {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
}

.view-btn:hover {
  background-color: #218838;
}

.no-products {
  text-align: center;
  color: #888;
}

/* Popup */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.popup-content {
  background: white;
  padding: 30px 40px;
  border-radius: 10px;
  width: 400px;
  position: relative;
}

.close-btn {
  position: absolute;
  right: 10px;
  top: 10px;
  border: none;
  background: none;
  font-size: 1.5rem;
  cursor: pointer;
}

//CreateProduct.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './CreateProduct.css';

function CreateProduct() {
  const navigate = useNavigate();

  // ✅ State Management
  const [productData, setProductData] = useState({
    name: '',
    brand: '',
    description: '',
    price: '',
    category: '',
    frameType: '',
    gender: 'Unisex',
    imageUrl: '',
    availability: true
  });

  const [errors, setErrors] = useState({});
  const [editId, setEditId] = useState(null);

  // ✅ Fetch existing product if in edit mode
  useEffect(() => {
    const storedEditId = localStorage.getItem('editId');
    if (storedEditId) {
      setEditId(storedEditId);
      fetchProduct(storedEditId);
    }
  }, []);

  const fetchProduct = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const res = await axios.get(`http://localhost:8080/product/${id}`, {
        headers: { Authorization: token }
      });
      setProductData(res.data);
    } catch (error) {
      console.error('Failed to fetch product:', error);
      navigate('/error');
    }
  };

  // ✅ Handle Input Change
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setProductData({
      ...productData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  // ✅ Validate Input Fields
  const validate = () => {
    const newErrors = {};
    if (!productData.name.trim()) newErrors.name = 'Product name is required';
    if (!productData.brand.trim()) newErrors.brand = 'Brand is required';
    if (!productData.description.trim()) newErrors.description = 'Description is required';
    if (!productData.category.trim()) newErrors.category = 'Category is required';
    if (!productData.price || isNaN(productData.price) || Number(productData.price) <= 0)
      newErrors.price = 'Price must be a positive number';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // ✅ Submit Form (Add / Update)
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) return;

    try {
      const token = localStorage.getItem('token');
      const config = { headers: { Authorization: token } };

      if (editId) {
        // Update existing product
        await axios.put(`http://localhost:8080/product/${editId}`, productData, config);
      } else {
        // Add new product
        await axios.post('http://localhost:8080/product/addProduct', productData, config);
      }

      localStorage.removeItem('editId');
      navigate('/manage-products');
    } catch (error) {
      console.error('Failed to submit product:', error);
      navigate('/error');
    }
  };

  // ✅ Back Navigation
  const handleBack = () => {
    navigate('/manage-products');
  };

  return (
    <div className="create-product-container">
      <h2>{editId ? 'Update Eyewear Product' : 'Create New Eyewear Product'}</h2>

      <form onSubmit={handleSubmit} className="product-form">

        {/* Product Name */}
        <div className="form-group">
          <label>Product Name</label>
          <input
            type="text"
            name="name"
            value={productData.name}
            onChange={handleChange}
            placeholder="Enter product name"
          />
          {errors.name && <p className="error">{errors.name}</p>}
        </div>

        {/* Brand */}
        <div className="form-group">
          <label>Brand</label>
          <input
            type="text"
            name="brand"
            value={productData.brand}
            onChange={handleChange}
            placeholder="Enter brand"
          />
          {errors.brand && <p className="error">{errors.brand}</p>}
        </div>

        {/* Description */}
        <div className="form-group">
          <label>Description</label>
          <textarea
            name="description"
            value={productData.description}
            onChange={handleChange}
            placeholder="Enter description"
          />
          {errors.description && <p className="error">{errors.description}</p>}
        </div>

        {/* Price */}
        <div className="form-group">
          <label>Price (₹)</label>
          <input
            type="number"
            name="price"
            value={productData.price}
            onChange={handleChange}
            placeholder="Enter price"
          />
          {errors.price && <p className="error">{errors.price}</p>}
        </div>

        {/* Category */}
        <div className="form-group">
          <label>Category</label>
          <select name="category" value={productData.category} onChange={handleChange}>
            <option value="">--Select Category--</option>
            <option value="Eyeglasses">Eyeglasses</option>
            <option value="Sunglasses">Sunglasses</option>
            <option value="Contact Lenses">Contact Lenses</option>
            <option value="Accessories">Accessories</option>
          </select>
          {errors.category && <p className="error">{errors.category}</p>}
        </div>

        {/* Frame Type */}
        <div className="form-group">
          <label>Frame Type</label>
          <select name="frameType" value={productData.frameType} onChange={handleChange}>
            <option value="">--Select Frame Type--</option>
            <option value="Full-Rim">Full-Rim</option>
            <option value="Half-Rim">Half-Rim</option>
            <option value="Rimless">Rimless</option>
          </select>
        </div>

        {/* Gender */}
        <div className="form-group">
          <label>Gender</label>
          <select name="gender" value={productData.gender} onChange={handleChange}>
            <option value="Unisex">Unisex</option>
            <option value="Men">Men</option>
            <option value="Women">Women</option>
          </select>
        </div>

        {/* Image URL */}
        <div className="form-group">
          <label>Image URL</label>
          <input
            type="text"
            name="imageUrl"
            value={productData.imageUrl}
            onChange={handleChange}
            placeholder="Enter image URL (optional)"
          />
        </div>

        {/* Availability */}
        <div className="form-group checkbox">
          <label>
            <input
              type="checkbox"
              name="availability"
              checked={productData.availability}
              onChange={handleChange}
            />
            Available
          </label>
        </div>

        {/* Buttons */}
        <div className="form-buttons">
          <button type="button" className="back-btn" onClick={handleBack}>
            Back
          </button>
          <button type="submit" className="submit-btn">
            {editId ? 'Update Product' : 'Create Product'}
          </button>
        </div>
      </form>
    </div>
  );
}

export default CreateProduct;

.create-product-container {
  max-width: 600px;
  margin: 40px auto;
  padding: 30px;
  background: white;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  font-family: 'Poppins', sans-serif;
}

.create-product-container h2 {
  text-align: center;
  margin-bottom: 20px;
  color: #333;
}

.product-form .form-group {
  margin-bottom: 15px;
}

label {
  display: block;
  font-weight: 600;
  margin-bottom: 5px;
}

input, select, textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

textarea {
  resize: vertical;
}

.error {
  color: red;
  font-size: 0.9rem;
  margin-top: 4px;
}

.form-group.checkbox {
  display: flex;
  align-items: center;
}

.form-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.back-btn, .submit-btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.back-btn {
  background-color: #6c757d;
  color: white;
}

.submit-btn {
  background-color: #007bff;
  color: white;
}

.submit-btn:hover {
  background-color: #0056b3;
}

//ManageProducts.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './ManageProducts.css';

function ManageProducts() {
  const navigate = useNavigate();

  // ✅ State Management
  const [products, setProducts] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortValue, setSortValue] = useState(1);
  const [showDeletePopup, setShowDeletePopup] = useState(false);
  const [productToDelete, setProductToDelete] = useState(null);

  // ✅ Reset editId and fetch data
  useEffect(() => {
    localStorage.removeItem('editId');
    fetchProducts();
    // eslint-disable-next-line
  }, [searchTerm, sortValue]);

  // ✅ Fetch User Products
  const fetchProducts = async () => {
    try {
      const token = localStorage.getItem('token');
      const userId = localStorage.getItem('userId');
      if (!token || !userId) {
        navigate('/login');
        return;
      }

      const response = await axios.post(
        `http://localhost:8080/product/getProductsByUserId?searchValue=${searchTerm}&sortValue=${sortValue}`,
        { userId },
        { headers: { Authorization: token } }
      );

      setProducts(response.data);
    } catch (error) {
      console.error('Error fetching products:', error);
      navigate('/error');
    }
  };

  // ✅ Logout handler
  const handleLogout = () => {
    localStorage.clear();
    navigate('/login');
  };

  // ✅ Navigate to Add Product
  const handleAddProduct = () => {
    navigate('/createproduct');
  };

  // ✅ Handle Edit Product
  const handleEdit = (id) => {
    localStorage.setItem('editId', id);
    navigate('/createproduct');
  };

  // ✅ Handle Delete Product
  const handleDeleteClick = (id) => {
    setProductToDelete(id);
    setShowDeletePopup(true);
  };

  // ✅ Confirm Delete
  const confirmDelete = async () => {
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`http://localhost:8080/product/${productToDelete}`, {
        headers: { Authorization: token }
      });
      setShowDeletePopup(false);
      setProductToDelete(null);
      fetchProducts();
    } catch (error) {
      console.error('Error deleting product:', error);
      navigate('/error');
    }
  };

  // ✅ Cancel Delete
  const cancelDelete = () => {
    setShowDeletePopup(false);
    setProductToDelete(null);
  };

  return (
    <div className="manage-products-container">
      {/* Header Section */}
      <div className="header">
        <h1>Manage Products</h1>
        <div>
          <button className="add-btn" onClick={handleAddProduct}>Add Product</button>
          <button className="logout-btn" onClick={handleLogout}>Logout</button>
        </div>
      </div>

      {/* Search & Sort Controls */}
      <div className="controls">
        <input
          type="text"
          placeholder="Search by product name..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-bar"
        />

        <div className="sort-controls">
          <button
            onClick={() => setSortValue(1)}
            className={sortValue === 1 ? 'active' : ''}
          >
            Asc
          </button>
          <button
            onClick={() => setSortValue(-1)}
            className={sortValue === -1 ? 'active' : ''}
          >
            Desc
          </button>
        </div>
      </div>

      {/* Products Table */}
      <table className="product-table">
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Brand</th>
            <th>Price (₹)</th>
            <th>Category</th>
            <th>Gender</th>
            <th>Actions</th>
          </tr>
        </thead>

        <tbody>
          {products.length > 0 ? (
            products.map((product) => (
              <tr key={product._id}>
                <td>{product.name}</td>
                <td>{product.brand}</td>
                <td>{product.price}</td>
                <td>{product.category}</td>
                <td>{product.gender}</td>
                <td>
                  <button
                    className="edit-btn"
                    onClick={() => handleEdit(product._id)}
                  >
                    Edit
                  </button>
                  <button
                    className="delete-btn"
                    onClick={() => handleDeleteClick(product._id)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6" className="no-records">No records found</td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Delete Confirmation Popup */}
      {showDeletePopup && (
        <div className="popup-overlay">
          <div className="popup-content">
            <h3>Are you sure you want to delete this product?</h3>
            <div className="popup-buttons">
              <button className="confirm-btn" onClick={confirmDelete}>Yes, Delete</button>
              <button className="cancel-btn" onClick={cancelDelete}>Cancel</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default ManageProducts;

.manage-products-container {
  font-family: 'Poppins', sans-serif;
  padding: 30px 50px;
  background-color: #f9f9fb;
  min-height: 100vh;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.header h1 {
  color: #333;
}

.add-btn, .logout-btn {
  padding: 8px 14px;
  margin-left: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: white;
}

.add-btn {
  background-color: #28a745;
}

.add-btn:hover {
  background-color: #218838;
}

.logout-btn {
  background-color: #e63946;
}

.logout-btn:hover {
  background-color: #b71c1c;
}

/* Controls */
.controls {
  display: flex;
  justify-content: space-between;
  margin: 20px 0;
}

.search-bar {
  width: 60%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.sort-controls button {
  margin-left: 8px;
  padding: 8px 12px;
  background-color: #007bff;
  border: none;
  color: white;
  border-radius: 4px;
  cursor: pointer;
}

.sort-controls button.active {
  background-color: #0056b3;
}

/* Table */
.product-table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.product-table th, .product-table td {
  padding: 12px 15px;
  border-bottom: 1px solid #ddd;
  text-align: left;
}

.product-table th {
  background-color: #007bff;
  color: white;
}

.edit-btn, .delete-btn {
  padding: 6px 12px;
  margin-right: 5px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: white;
}

.edit-btn {
  background-color: #17a2b8;
}

.edit-btn:hover {
  background-color: #138496;
}

.delete-btn {
  background-color: #dc3545;
}

.delete-btn:hover {
  background-color: #b02a37;
}

.no-records {
  text-align: center;
  color: #888;
}

/* Popup */
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.4);
  display: flex;
  justify-content: center;
  align-items: center;
}

.popup-content {
  background: white;
  padding: 30px;
  border-radius: 10px;
  text-align: center;
}

.popup-buttons {
  margin-top: 20px;
  display: flex;
  justify-content: space-around;
}

.confirm-btn {
  background-color: #e63946;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

.cancel-btn {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

//App.js
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

// ✅ Import all components
import Login from './components/Login';
import Register from './components/Register';
import CreateProduct from './components/CreateProduct';
import ManageProducts from './components/ManageProducts';
import DisplayProduct from './components/DisplayProduct';
import ErrorPage from './components/ErrorPage';

// ✅ App Component
function App() {
  return (
    <BrowserRouter>
      <Routes>

        {/* Authentication Routes */}
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />

        {/* Manager Routes */}
        <Route path="/createproduct" element={<CreateProduct />} />
        <Route path="/manage-products" element={<ManageProducts />} />

        {/* Employee Route */}
        <Route path="/product-catalog" element={<DisplayProduct />} />

        {/* Error Route */}
        <Route path="/error" element={<ErrorPage />} />

        {/* Default / Wildcard Route */}
        <Route path="*" element={<Navigate to="/login" replace />} />

      </Routes>
    </BrowserRouter>
  );
}

export default App;

//
apiconfig.js
export const apiUrl = 'http://localhost:8080';

